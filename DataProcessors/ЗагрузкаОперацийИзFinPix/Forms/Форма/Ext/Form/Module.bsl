
&НаСервере
Процедура ДобавитьСопоставлениеНаСервере(гуид, ссылкавбазе)
    
    Если ЗначениеЗаполнено(ссылкавбазе) Тогда
        мз = РегистрыСведений.СоответствияОбъектов.СоздатьМенеджерЗаписи();
        мз.ВнешнийУИД  = гуид;
        мз.НашаСсылка  = ссылкавбазе;
        мз.ВнутреннийУИД = ссылкавбазе.УникальныйИдентификатор();
        мз.Записать();
    КонецЕсли; 
    
КонецПроцедуры

&НаКлиенте
Процедура КонтактыНашаСсылкаПриИзменении(Элемент)
    ДобавитьСопоставлениеНаСервере(Элементы.Контакты.ТекущиеДанные.УИД, Элементы.Контакты.ТекущиеДанные.НашаСсылка);
КонецПроцедуры

Функция ПолучитьДанныеСервиса(НашСервис)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ДанныеДляОбмена.AccessToken КАК AccessToken,
    |   ДанныеДляОбмена.RefreshTime КАК RefreshTime,
    |   ДанныеДляОбмена.RefreshToken КАК RefreshToken,
    |   ВнешниеСервисы.Сервер КАК Сервер,
    |   ВнешниеСервисы.ssl КАК ssl,
    |   ВнешниеСервисы.АдресТокена КАК АдресТокена,
    |   ВнешниеСервисы.Логин КАК Логин,
    |   ВнешниеСервисы.Пароль КАК Пароль,
    |   ВнешниеСервисы.client_id КАК client_id,
    |   ВнешниеСервисы.client_secret КАК client_secret,
    |   ВнешниеСервисы.device_id КАК device_id
    |ИЗ
    |   Справочник.ВнешниеСервисы КАК ВнешниеСервисы
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДляОбмена КАК ДанныеДляОбмена
    |       ПО (ДанныеДляОбмена.Сервис = ВнешниеСервисы.Ссылка)
    |ГДЕ
    |   ВнешниеСервисы.Ссылка = &Сервис";
    
    Запрос.УстановитьПараметр("Сервис", НашСервис);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ТЗ = РезультатЗапроса.Выгрузить();
    
    СтрВозвр = Новый Структура;
    Для каждого КолТЗ Из ТЗ.Колонки Цикл
        СтрВозвр.Вставить(КолТЗ.Имя, ТЗ[0][КолТЗ.Имя]);
    КонецЦикла; 
    
    Возврат (СтрВозвр);
    
КонецФункции

&НаКлиенте
Процедура ПрочитатьФайл(Команда)
    
    ОбновитьДанныеСервиса();
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеСервиса()

    Объект.Бюджеты.Очистить();
    Объект.Транзакции.Очистить();
    Объект.Счета.Очистить();
    Объект.Категории.Очистить();
    Объект.Контакты.Очистить();
    
    Если НЕ ЗначениеЗаполнено(Объект.Сервис) Тогда
        Сообщить("Выберите сервис обмена!");
        Возврат;    
    КонецЕсли; 
    
    СтруктураСервиса = ПолучитьДанныеСервиса(Объект.Сервис);     
    
    Если СтруктураСервиса.AccessToken = Null Тогда  //в регистре пока пусто
        Состояние("Нет данных. Первая авторизация");
        ПолучитьТокен();
        СтруктураСервиса = ПолучитьДанныеСервиса(Объект.Сервис);     
    ИначеЕсли 	СтруктураСервиса.RefreshTime < ТекущаяДата() Тогда
        Состояние("Обновление данных. Авторизация");
        ПолучитьТокен();
        СтруктураСервиса = ПолучитьДанныеСервиса(Объект.Сервис);     
    КонецЕсли; 
    
    Если (СтруктураСервиса.AccessToken <> "") И (Объект.Бюджеты.Количество() = 0) Тогда
        
        Адрес = "/api/v1/budgets";
        
        HTTPСоединение = Новый HTTPСоединение(СтруктураСервиса.Сервер,,,,,СтруктураСервиса.ssl);
        HTTPЗапрос = Новый HTTPЗапрос(Адрес);
        HTTPЗапрос.Заголовки.Вставить("Content-type", "application/x-www-form-urlencoded");
        HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + СтруктураСервиса.AccessToken);
        
        ФайлОтвет = ПолучитьИмяВременногоФайла();
        Ответ = HTTPСоединение.Получить(HTTPЗапрос, ФайлОтвет);   
        
        //Если Ответ.КодСостояния <> 200 Тогда
        //    
        //    ВызватьИсключение "Ошибка при получении бюджетов"; 
        //    
        //КонецЕсли;     
        
        Попытка
            
            ТекстHТМЛ = Новый ТекстовыйДокумент;
            ТекстHТМЛ.Прочитать(ФайлОтвет, КодировкаТекста.UTF8);
            json = ТекстHТМЛ.ПолучитьТекст();
            //Сообщить(json);
            Чтение = Новый ЧтениеJSON;
            Чтение.УстановитьСтроку(json);
            ОтветСтруктура = ПрочитатьJSON(Чтение);
            
            Если ОтветСтруктура.meta["total_items"] > 0 Тогда
                Для каждого бюдж Из ОтветСтруктура.data Цикл
                    ДобавитьБюджет(бюдж["guid"]);
                КонецЦикла; 
            Иначе
                Сообщить("Нет доступных бюджетов!");
            КонецЕсли; 
            
        Исключение
            Сообщить("Нет доступных бюджетов!");
        КонецПопытки; 
        
    КонецЕсли; 
    
    
    Если Объект.Бюджеты.Количество() > 0 Тогда  //запросим все данные бюджета
        
        Для каждого Бюджет Из Объект.Бюджеты Цикл
            
            ЗапросКАпиСервиса(HTTPЗапрос, HTTPСоединение, Бюджет, СтруктураСервиса, 1);
            ЗапросКАпиСервиса(HTTPЗапрос, HTTPСоединение, Бюджет, СтруктураСервиса, 2);
            ЗапросКАпиСервиса(HTTPЗапрос, HTTPСоединение, Бюджет, СтруктураСервиса, 3);
            ЗапросКАпиСервиса(HTTPЗапрос, HTTPСоединение, Бюджет, СтруктураСервиса, 4);
            
        КонецЦикла;
        
    КонецЕсли; 

КонецПроцедуры
 

&НаКлиенте
Процедура ЗапросКАпиСервиса(HTTPЗапрос, HTTPСоединение, Знач Бюджет, Знач СтруктураСервиса, ТипЗапроса = 1)
    
    Перем json, Адрес, Ответ, ОтветСтруктура, ТекстHТМЛ, ФайлОтвет, Чтение;
    
    Если ТипЗапроса = 1 Тогда  //контакты
        Адрес = "/api/v1/budgets/"+Бюджет.УИД+"/sources";
    ИначеЕсли  ТипЗапроса = 2 Тогда  //категории
        Адрес = "/api/v1/budgets/"+Бюджет.УИД+"/categories";
    ИначеЕсли  ТипЗапроса = 3 Тогда  //счета
        Адрес = "/api/v1/budgets/"+Бюджет.УИД+"/accounts";
    ИначеЕсли  ТипЗапроса = 4 Тогда  //транзакции
        Адрес = "/api/v1/budgets/"+Бюджет.УИД+"/transactions";
    КонецЕсли; 
    
    HTTPСоединение = Новый HTTPСоединение(СтруктураСервиса.Сервер,,,,,СтруктураСервиса.ssl);
    HTTPЗапрос = Новый HTTPЗапрос(Адрес);
    HTTPЗапрос.Заголовки.Вставить("Content-type", "application/x-www-form-urlencoded");
    HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + СтруктураСервиса.AccessToken);
    
    ФайлОтвет = ПолучитьИмяВременногоФайла();
    Ответ = HTTPСоединение.Получить(HTTPЗапрос, ФайлОтвет);   
    
    //Если Ответ.КодСостояния <> 200 Тогда
    //    
    //    ВызватьИсключение "Ошибка при получении данных с " + Адрес; 
    //    
    //КонецЕсли;     
    
    ТекстHТМЛ = Новый ТекстовыйДокумент;
    ТекстHТМЛ.Прочитать(ФайлОтвет, КодировкаТекста.UTF8);
    json = ТекстHТМЛ.ПолучитьТекст();
    //Сообщить("=====================");
    //Сообщить(Адрес);
    //Сообщить(json);
    Чтение = Новый ЧтениеJSON;
    Чтение.УстановитьСтроку(json);
    ОтветСтруктура = ПрочитатьJSON(Чтение);
    
    Если ТипЗапроса < 4 Тогда //справочники
        Для каждого элДата Из ОтветСтруктура.data Цикл
            Если элДата["is_active"] = Истина Тогда
                ДобавитьВТабчасть(элДата["guid"], элДата["name"], ТипЗапроса);
            КонецЕсли; 
        КонецЦикла; 
    Иначе //транзакции
        Для каждого элДата Из ОтветСтруктура.data Цикл
            Попытка
                Если элДата["deleted"] = Истина Тогда
                    Продолжить;           
                КонецЕсли; 
            Исключение
            
            КонецПопытки; 
            
            ТипТранзакции = элДата["transaction_type"];  //1 - доход, 2 - расход, 3 - перевод?? 
            
            НС = Объект.Транзакции.Добавить();
            НС.УИД = элДата["guid"];
            НС.ДатаВремя = Дата(1970,1,1,1,0,0) + Число(элДата["transaction_datetime"]) / 1000;
            НС.НашаСсылка = НайтиСсылкуВБазе(элДата["guid"]);
            НС.Счет = НайтиСсылкуВБазе(элДата["from_account_guid"]);
            НС.Контакт = НайтиСсылкуВБазе(элДата["source_guid"]);
            НС.Сумма = Число(элДата["from_value"]);
            НС.Примечание =  элДата["notes"];
            Попытка
                НС.Статья = НайтиСсылкуВБазе(элДата["category_guid"]);
            Исключение  КонецПопытки; 
            НС.ТипОперации = ТипТранзакции;
            
            Если НЕ ЗначениеЗаполнено(НС.НашаСсылка)  Тогда
                НС.Грузить = Истина;            	
            КонецЕсли; 
            
            //пока загрузим только категории и суммы
            СуммаПозиций = 0; гуидСтатьи = "";
            Для каждого итем Из элДата["items"] Цикл
                Попытка
                    Если итем["deleted"] = Истина Тогда
                        Продолжить;           
                    КонецЕсли; 
                Исключение  КонецПопытки; 
            	СуммаПозиций = СуммаПозиций + итем["cost"];
                гуидСтатьи = итем["category_guid"];
            КонецЦикла; 
            Если НС.Сумма = 0 Тогда
                НС.Сумма = СуммаПозиций;
            КонецЕсли; 
            Попытка
                НС.Статья = НайтиСсылкуВБазе(гуидСтатьи);
            Исключение  КонецПопытки; 
        КонецЦикла; 
    КонецЕсли; 
    
КонецПроцедуры

&НаСервере
Процедура СформироватьОперацииНаСервере()
    
    Док = Документы.Операция;
    Для каждого ТекДок Из Объект.Транзакции Цикл
        Если НЕ ТекДок.Грузить Тогда
            Продолжить;        	
        КонецЕсли; 
        НайденДок = Док.НайтиПоРеквизиту("ВнешнийИД", ТекДок.УИД);
        Если НайденДок = Док.ПустаяСсылка() Тогда
            ДокОбъект = Док.СоздатьДокумент();
            ДокОбъект.Дата = ТекДок.ДатаВремя;
            Если ТекДок.ТипОперации = 1 Тогда
                ДокОбъект.ТипОперации = Перечисления.ТипыОпераций.Приход;
            ИначеЕсли ТекДок.ТипОперации = 2 Тогда
                ДокОбъект.ТипОперации = Перечисления.ТипыОпераций.Расход;
            Иначе
                ДокОбъект.ТипОперации = Перечисления.ТипыОпераций.Перевод;
            КонецЕсли; 
            ДокОбъект.ВнешнийИД = ТекДок.УИД;
            ДокОбъект.ЗагруженАвтоматически = Истина;

            СтрокаТЧ = ДокОбъект.ДанныеОперации.Добавить();
            СтрокаТЧ.Статья = ТекДок.Статья;
            СтрокаТЧ.Счет = ТекДок.Счет;
            СтрокаТЧ.Сумма = ТекДок.Сумма;
            СтрокаТЧ.Примечание = ТекДок.Примечание;
            СтрокаТЧ.Контакт = ТекДок.Контакт;

            ДокОбъект.Записать();
            ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
            ДобавитьСопоставлениеНаСервере(ТекДок.УИД, ДокОбъект.Ссылка);
            Сообщить("Документ " + ДокОбъект + " загружен.");
        Иначе
            Сообщить("Документ " + НайденДок + " был загружен ранее.");
        КонецЕсли; 
        ТекДок.Грузить = Ложь;
    КонецЦикла; 
   
КонецПроцедуры

Процедура ДобавитьБюджет(гуид)
    
    НС = Объект.Бюджеты.Добавить();
    НС.УИД = гуид;
    
КонецПроцедуры

Процедура ДобавитьВТабчасть(гуид, наим, типЗ)
    
    Если типЗ = 1 Тогда  //контакты
        НС = Объект.Контакты.Добавить();
    ИначеЕсли  типЗ = 2 Тогда  //категории
        НС = Объект.Категории.Добавить();
    Иначе  //счета
        НС = Объект.Счета.Добавить();
    КонецЕсли;      
    
    НС.УИД = гуид;
    НС.Наименование = наим;
    НС.НашаСсылка = НайтиСсылкуВБазе(гуид);
    
КонецПроцедуры

Функция НайтиСсылкуВБазе(гуид)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   СоответствияОбъектов.НашаСсылка КАК НашаСсылка
    |ИЗ
    |   РегистрСведений.СоответствияОбъектов КАК СоответствияОбъектов
    |ГДЕ
    |   СоответствияОбъектов.ВнешнийУИД = &гуид";
    
    Запрос.УстановитьПараметр("гуид", СокрЛП(гуид));
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        Возврат ВыборкаДетальныеЗаписи.НашаСсылка;
    Иначе
        Возврат Неопределено;
    КонецЕсли;
    
КонецФункции // НайтиСсылкуВБазе()

&НаКлиенте
Процедура СформироватьОперации(Команда)
    СформироватьОперацииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура Авторизоваться(Команда)
    
    ПолучитьТокен();
    
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТокен()

    СтруктураСервиса = ПолучитьДанныеСервиса(Объект.Сервис);     
    
    HTTPСоединение = Новый HTTPСоединение(СтруктураСервиса.Сервер,,,,,СтруктураСервиса.ssl);
    HTTPЗапрос = Новый HTTPЗапрос(СтруктураСервиса.АдресТокена);
    HTTPЗапрос.Заголовки.Вставить("Content-type", "application/x-www-form-urlencoded");
    HTTPЗапрос.УстановитьТелоИзСтроки("grant_type=password&client_id="+СтруктураСервиса.client_id+
    "&client_secret="+СтруктураСервиса.client_secret+
    "&username="+СтруктураСервиса.Логин+
    "&password="+СтруктураСервиса.Пароль+
    "&device_id="+СтруктураСервиса.device_id);
    Ответ = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);   
    
    Если Ответ.КодСостояния <> 200 Тогда
        
        ВызватьИсключение "Ошибка при получении access_token"; 
        
    Иначе
        
        //Сообщить("Ответ: " + Ответ.ПолучитьТелоКакСтроку("UTF-8"));
        
        json = Ответ.ПолучитьТелоКакСтроку();                
        Чтение = Новый ЧтениеJSON;
        Чтение.УстановитьСтроку(json);
        ОтветСтруктура = ПрочитатьJSON(Чтение);
        
        ОбновитьДанныеРегистраДанных(ОтветСтруктура);
    КонецЕсли;
   
КонецПроцедуры
 

Процедура ОбновитьДанныеРегистраДанных(структ)
    
    мз = РегистрыСведений.ДанныеДляОбмена.СоздатьМенеджерЗаписи();
    мз.Сервис  = Объект.Сервис;
    мз.AccessToken  = структ.access_token;
    мз.RefreshToken = структ.refresh_token;
    мз.RefreshTime  = ТекущаяДата() + структ.expires_in;
    мз.Записать();
    
КонецПроцедуры


&НаКлиенте
Процедура КатегорииНашаСсылкаПриИзменении(Элемент)
    ДобавитьСопоставлениеНаСервере(Элементы.Категории.ТекущиеДанные.УИД, Элементы.Категории.ТекущиеДанные.НашаСсылка);
КонецПроцедуры


&НаКлиенте
Процедура СчетаНашаСсылкаПриИзменении(Элемент)
    ДобавитьСопоставлениеНаСервере(Элементы.Счета.ТекущиеДанные.УИД, Элементы.Счета.ТекущиеДанные.НашаСсылка);
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    Если ЗначениеЗаполнено(Объект.Сервис) Тогда
        ОбновитьДанныеСервиса();
    КонецЕсли; 
    
КонецПроцедуры


&НаКлиенте
Процедура ТранзакцииНашаСсылкаПриИзменении(Элемент)
    ДобавитьСопоставлениеНаСервере(Элементы.Транзакции.ТекущиеДанные.УИД, Элементы.Транзакции.ТекущиеДанные.НашаСсылка);
КонецПроцедуры

