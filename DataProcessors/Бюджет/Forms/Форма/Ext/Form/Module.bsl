&НаКлиенте
Процедура ПериодВперед(Команда)
	
	ТекПериод = НачалоМесяца(ДобавитьМесяц(ТекПериод, 1));
	ОбновитьДанные();
	РаскрытьВетвиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНазад(Команда)
	
	ТекПериод = НачалоМесяца(ДобавитьМесяц(ТекПериод, -1));
	ОбновитьДанные();
	РаскрытьВетвиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТекПериод = НачалоМесяца(ТекущаяДата());
	ОбновитьДанные();
	РаскрытьВетвиДерева();
	ОбновитьПоказателиНаФорме();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанные()
	
	ВалютаУчета = Константы.ОсновнаяВалютаУчета.Получить();
	Если ВалютаУчета <> Справочники.Валюты.ПустаяСсылка() Тогда
		ВалютаУчетаСтр = ВалютаУчета.КраткоеНаименование;
	КонецЕсли; 
	
	Если ЗаполнитьПланНаМесяц(НачалоМесяца(ТекПериод)) Тогда
		ДеревоСтатей = ЗапросПоСтатьямНаСервере();
	Иначе	
	    ДеревоСтатей = Новый ДеревоЗначений;
	КонецЕсли;
	
	Объект.ТабЧасть.Очистить();
	ДОбъект = РеквизитФормыВЗначение("Объект");
	ДеревоВТаблицу(ДОбъект, ДеревоСтатей, "ТабЧасть");
	ЗначениеВРеквизитФормы(ДОбъект, "Объект");
	
	ПересчитатьДанныеПоГруппамТабЧасти();
	
	КомандаТаблицуВДеревоНаСервере();
	ОбновитьПоказателиНаФорме();
	ОбновитьОстаткиПоСчетамИДолги();
	
КонецПроцедуры

Процедура ОбновитьОстаткиПоСчетамИДолги()

	ДеревоСчетов = РеквизитФормыВЗначение("ОстаткиПоСчетам");
	ДеревоСчетов.Строки.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
        |   ДвижениеДенегПоСчетамОстатки.Счет КАК Счет,
        |   ДвижениеДенегПоСчетамОстатки.СуммаОстаток КАК Остаток,
        |   ВЫБОР
        |       КОГДА ДвижениеДенегПоСчетамОстатки.Счет.ДляНакоплений
        |           ТОГДА ""Накопления""
        |       ИНАЧЕ ВЫБОР
        |               КОГДА ДвижениеДенегПоСчетамОстатки.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КартаКредитная)
        |                   ТОГДА ""Кредитные карты""
        |               ИНАЧЕ ""Прочее""
        |           КОНЕЦ
        |   КОНЕЦ КАК ТипС
        |ИЗ
        |   РегистрНакопления.ДвижениеДенегПоСчетам.Остатки(&ДатаЗапроса, ) КАК ДвижениеДенегПоСчетамОстатки
        |ИТОГИ
        |   СУММА(Остаток)
        |ПО
        |   ТипС,
        |   Счет";
	
	Запрос.УстановитьПараметр("ДатаЗапроса", КонецДня(ТекущаяДата()));
	
	Рез = Запрос.Выполнить();
	Выборка = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    
	Пока Выборка.СледующийПоЗначениюПоля("ТипС") Цикл
		НовСтрТип = ДеревоСчетов.Строки.Добавить();
		НовСтрТип.Счет = Выборка.ТипС;	
		НовСтрТип.Остаток = Выборка.Остаток;	
		ВыборкаСчет = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчет.СледующийПоЗначениюПоля("Счет") Цикл
			НовСтрСчет = НовСтрТип.Строки.Добавить();
			НовСтрСчет.Счет = ВыборкаСчет.Счет;	
			НовСтрСчет.Остаток = ВыборкаСчет.Остаток;	
		КонецЦикла; 
	КонецЦикла; 
	ЗначениеВРеквизитФормы(ДеревоСчетов, "ОстаткиПоСчетам");
    	
	//ДОЛГИ
	ДеревоДолгов = РеквизитФормыВЗначение("ТаблицаДолги");
	ДеревоДолгов.Строки.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыОстатки.Контакт КАК Контакт,
		|	ВзаиморасчетыОстатки.СуммаОстаток КАК Сумма,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыОстатки.СуммаОстаток > 0
		|			ТОГДА ""Мы должны""
		|		ИНАЧЕ ""Нам должны""
		|	КОНЕЦ КАК ТипДолга
		|ИЗ
		|	РегистрНакопления.Взаиморасчеты.Остатки(&ДатаЗапроса, ) КАК ВзаиморасчетыОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипДолга,
		|	ВзаиморасчетыОстатки.Контакт.Наименование
		|ИТОГИ
		|	СУММА(Сумма)
		|ПО
		|	ТипДолга,
		|	Контакт";
	
	Запрос.УстановитьПараметр("ДатаЗапроса", КонецДня(ТекущаяДата()));
	
	Рез = Запрос.Выполнить();
	Выборка = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.СледующийПоЗначениюПоля("ТипДолга") Цикл
		НовСтрОст = ДеревоДолгов.Строки.Добавить();
		НовСтрОст.Контакт = Выборка.ТипДолга;	
		НовСтрОст.Сумма = Выборка.Сумма;	
		ВыборкаКонт = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКонт.СледующийПоЗначениюПоля("Контакт") Цикл
			НовСтрОстКонт = НовСтрОст.Строки.Добавить();
			НовСтрОстКонт.Контакт = ВыборкаКонт.Контакт;	
			НовСтрОстКонт.Сумма = ВыборкаКонт.Сумма;	
		КонецЦикла; 
	КонецЦикла; 
	ЗначениеВРеквизитФормы(ДеревоДолгов, "ТаблицаДолги");
	
КонецПроцедуры

&НаСервере
Функция ЗапросПоСтатьямНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиРасходов.Ссылка КАК Статья,
		|	ВЫБОР
		|		КОГДА СтатьиРасходов.ЭтоГруппа
		|			ТОГДА ""Группа""
		|		ИНАЧЕ ""Элемент""
		|	КОНЕЦ КАК ТипГ
		|ПОМЕСТИТЬ врСтатьи
		|ИЗ
		|	Справочник.СтатьиРасходов КАК СтатьиРасходов
		|ГДЕ
		|	СтатьиРасходов.Активна
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	врСтатьи.Статья КАК Статья,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПланРасходов.Сумма, 0) <> 0
		|			ТОГДА ПланРасходов.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаПлан,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДвижениеДенегПоСчетамОбороты.СуммаОборот, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ДвижениеДенегПоСчетамОбороты.СуммаОборот * -1
		|	КОНЕЦ КАК СуммаФакт,
		|	врСтатьи.ТипГ КАК ТипГ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПланРасходов.Сумма, 0) <> 0
		|			ТОГДА ПланРасходов.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ - ВЫБОР
		|		КОГДА ЕСТЬNULL(ДвижениеДенегПоСчетамОбороты.СуммаОборот, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ДвижениеДенегПоСчетамОбороты.СуммаОборот * -1
		|	КОНЕЦ КАК Доступно
		|ИЗ
		|	врСтатьи КАК врСтатьи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланРасходов КАК ПланРасходов
		|		ПО врСтатьи.Статья.Ссылка = ПланРасходов.Статья
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвижениеДенегПоСчетам.Обороты(&НачДатаЗапроса, &КонДатаЗапроса, Период, ) КАК ДвижениеДенегПоСчетамОбороты
		|		ПО врСтатьи.Статья.Ссылка = ДвижениеДенегПоСчетамОбороты.Статья
		|ГДЕ
		|	ПланРасходов.Период МЕЖДУ &НачДатаЗапроса И &КонДатаЗапроса
		|ИТОГИ ПО
		|	Статья ТОЛЬКО ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("КонДатаЗапроса", КонецМесяца(ТекПериод));
	Запрос.УстановитьПараметр("НачДатаЗапроса", НачалоМесяца(ТекПериод));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	КонецЕсли; 

КонецФункции

Функция ЗаполнитьПланНаМесяц(НаДату)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиРасходов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтатьиРасходов КАК СтатьиРасходов
		|ГДЕ
		|	СтатьиРасходов.Активна";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;	
	КонецЕсли; 
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        //проверим, нет ли плана на эту дату
        тест = РегистрыСведений.ПланРасходов.Получить(НаДату, Новый Структура("Статья", ВыборкаДетальныеЗаписи.Ссылка));
        Если тест.Сумма <> 0 Тогда
            Продолжить;        
        КонецЕсли; 
		мз = РегистрыСведений.ПланРасходов.СоздатьМенеджерЗаписи();
		мз.Период = НаДату;
		мз.Статья = ВыборкаДетальныеЗаписи.Ссылка;
		мз.Сумма  = 0;
		мз.Записать();
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
 
&НаКлиенте
Процедура РаскрытьВетвиДерева()
	
	ЭлементыДерева = ДеревоЗначений.ПолучитьЭлементы();
    Для каждого ЭлементДерева Из ЭлементыДерева Цикл
        Элементы.ДеревоЗначений.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
    КонецЦикла;
	
	СтрокиДолгов = ТаблицаДолги.ПолучитьЭлементы();
    Для каждого ЭлементДерева Из СтрокиДолгов Цикл
        Элементы.ТаблицаДолги.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
    КонецЦикла;
	
	СтрокиСчетов = ОстаткиПоСчетам.ПолучитьЭлементы();
    Для каждого ЭлементДерева Из СтрокиСчетов Цикл
        Элементы.ОстаткиПоСчетам.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
    КонецЦикла;
		
КонецПроцедуры

//источник: https://helpf.pro/faq83/view/1588.html
&НаСервере
Процедура КомандаДеревоВТаблицуНаСервере(ДЗ = Неопределено)
	
	Объект.ТабЧасть.Очистить();
	ДОбъект = РеквизитФормыВЗначение("Объект");
	Если ДЗ = Неопределено Тогда
		ДеревоВТаблицу(ДОбъект, РеквизитФормыВЗначение("ДеревоЗначений"), "ТабЧасть");
	Иначе	
		ДеревоВТаблицу(ДОбъект, ДЗ, "ТабЧасть");
	КонецЕсли; 
	ЗначениеВРеквизитФормы(ДОбъект, "Объект");
	
КонецПроцедуры 

&НаСервере
Процедура КомандаТаблицуВДеревоНаСервере()
	
	Дерево = ТаблицаВДерево(РеквизитФормыВЗначение("Объект"), "ТабЧасть"); //ТабЧасть - имя табличной части
	ЗначениеВРеквизитФормы(Дерево, "ДеревоЗначений");//ДеревоЗначений - реквизит формы с типом дерево значений
	Элементы.ДеревоЗначений.Обновить();
		
КонецПроцедуры

//ФОРМИРОВАНИЕ ТАБЛИЦЫ ИЗ ДЕРЕВА
&НаСервере
Процедура ДеревоВТаблицу(ДокОбъект, ДеревоЗначений, НаименованиеТабличнойЧастиДокумента, СтрокаДерева = NULL, КлючСвязи = NULL) Экспорт
	Если СтрокаДерева = NULL И КлючСвязи = NULL Тогда
		//ПЕРВЫЙ ВЫЗОВ ПРОЦЕДУРЫ (КОРНЕВЫЕ ЭЛЕМЕНТЫ)
		ПервыйВызов = Истина;
		ДокОбъект[НаименованиеТабличнойЧастиДокумента].Очистить();
		ИсточникВыборки = ДеревоЗначений.Строки;
		КлючСвязи = 0; // ЭЛЕМЕНТ ВЕРХНЕГО УРОВНЯ ИМЕЕТ НОМЕР СТРОКИ РОДИТЕЛЯ 0 (ОБЯЗАТЕЛЬНЫЙ РЕКВИЗИТ)
	Иначе
		//ВНУТРЕННИЙ ВЫЗОВ ПРОЦЕДУРЫ (ПОДЧИНЕННЫЕ ЭЛЕМЕНТЫ)
		ПервыйВызов = Ложь;
		ИсточникВыборки = СтрокаДерева.Строки;
	КонецЕсли;
	Для каждого Стр из ИсточникВыборки Цикл
		НС = ДокОбъект[НаименованиеТабличнойЧастиДокумента].Добавить();
		Для каждого Кол из ДокОбъект.Метаданные().ТабличныеЧасти[НаименованиеТабличнойЧастиДокумента].Реквизиты Цикл
			Если Кол.Имя = "КлючСвязи" Тогда
				НС.КлючСвязи = КлючСвязи
			ИначеЕсли Кол.Имя = "НомерСтроки" Тогда
				Продолжить;
			Иначе 
				НС[Кол.Имя] = Стр[Кол.Имя];
			КонецЕсли;
		КонецЦикла;
		Если НЕ Стр.Строки.Количество() = 0 Тогда
			ДеревоВТаблицу(ДокОбъект,,НаименованиеТабличнойЧастиДокумента, Стр, НС.НомерСтроки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

//ФОРМИРОВАНИЕ ДЕРЕВА ИЗ ТАБЛИЦЫ
&НаСервере
Функция ТаблицаВДерево(ДокОбъект, НаименованиеТабличнойЧастиДокумента, КлючСвязи = NULL, ЭлементРодитель = NULL) Экспорт	
	//ПОДГОТОВКА КОЛОНОК ДЕРЕВА
	КолонкиТаблицы = ДокОбъект.Метаданные().ТабличныеЧасти[НаименованиеТабличнойЧастиДокумента].Реквизиты;
	ДеревоЗначений2 = Новый ДеревоЗначений;
	Для каждого Кол из КолонкиТаблицы Цикл
		Если Кол.Имя = "НомерСтроки" ИЛИ Кол.Имя = "КлючСвязи" Тогда
			Продолжить;
		Иначе
			ДеревоЗначений2.Колонки.Добавить(Кол.Имя, Новый ОписаниеТипов(Кол.Тип));
		КонецЕсли;
	КонецЦикла;//ДеревоЗначений.Строки.Очистить();
	
	Если КлючСвязи = NULL И ЭлементРодитель = NULL Тогда
		//ПЕРВЫЙ ВЫЗОВ ПРОЦЕДУРЫ (КОРНЕВЫЕ ЭЛЕМЕНТЫ)
		ИсточникВыборки = ДеревоЗначений2.Строки;
		КлючСвязи = 0; // ЭЛЕМЕНТ ВЕРХНЕГО УРОВНЯ ИМЕЕТ НОМЕР СТРОКИ РОДИТЕЛЯ 0 (ОБЯЗАТЕЛЬНЫЙ РЕКВИЗИТ)
	Иначе
		//ВНУТРЕННИЙ ВЫЗОВ ПРОЦЕДУРЫ (ПОДЧИНЕННЫЕ ЭЛЕМЕНТЫ)
		ИсточникВыборки = ЭлементРодитель.Строки;
	КонецЕсли;
	Фильтр = Новый Структура("КлючСвязи", КлючСвязи);
	М = ДокОбъект[НаименованиеТабличнойЧастиДокумента].НайтиСтроки(Фильтр);
	Если М.Количество() = 0 Тогда
		Возврат ДеревоЗначений2;
	КонецЕсли;
	Для каждого Стр из М Цикл
		Элемент = ИсточникВыборки.Добавить();
		Для каждого Кол из КолонкиТаблицы Цикл
			Если Кол.Имя = "НомерСтроки" ИЛИ Кол.Имя = "КлючСвязи" Тогда
				Продолжить;
			Иначе
				Элемент[Кол.Имя] = Стр[Кол.Имя];
			КонецЕсли;
		КонецЦикла;
		ТаблицаВДерево(ДокОбъект, НаименованиеТабличнойЧастиДокумента, Стр.НомерСтроки, Элемент); //ДОБАВЛЕНИЕ ПОДЧИНЁННЫХ ЭЛЕМЕНТОВ В ДЕРЕВО
	КонецЦикла;
	Возврат ДеревоЗначений2;
КонецФункции

///////////////////////////////////////////////////

&НаКлиенте
Процедура ДеревоЗначенийПриИзменении(Элемент)
	
	КомандаДеревоВТаблицуНаСервере();
	
	ПересчитатьДанныеПоГруппамТабЧасти();
	
	КомандаТаблицуВДеревоНаСервере();
	РаскрытьВетвиДерева();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьДанныеПоГруппамТабЧасти()
	
	Перем НайденныеСтроки, Стр, СтрТаб;
	
	Для каждого СтрТаб Из Объект.ТабЧасть Цикл
		
		Если СтрТаб.ТипГ <> "Элемент" Тогда
			СтрТаб.СуммаПлан = 0;  СтрТаб.СуммаФакт = 0;
			НайденныеСтроки = Объект.ТабЧасть.НайтиСтроки(Новый Структура("КлючСвязи", СтрТаб.НомерСтроки));	
			Для каждого Стр Из НайденныеСтроки Цикл
				СтрТаб.СуммаПлан = СтрТаб.СуммаПлан + Стр.СуммаПлан;
				СтрТаб.СуммаФакт = СтрТаб.СуммаФакт + Стр.СуммаФакт;
			КонецЦикла; 
		Иначе //запишем в регистр обновленные данные	
			ОбновитьПлановыеПоказатели(СтрТаб.Статья, СтрТаб.СуммаПлан);
		КонецЕсли; 	
		СтрТаб.Доступно = СтрТаб.СуммаПлан - СтрТаб.СуммаФакт;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьПлановыеПоказатели(Ст, Сум)
	
	Если НЕ Ст.ЭтоГруппа Тогда
		мз = РегистрыСведений.ПланРасходов.СоздатьМенеджерЗаписи();
		мз.Период = ТекПериод;
		мз.Статья = Ст;
		мз.Сумма  = Сум;
		мз.Записать();
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийПриАктивизацииСтроки(Элемент)
	
	Попытка
		ТекСтатья = Элемент.ТекущиеДанные.Статья;
	Исключение
		ТекСтатья = Неопределено;
	КонецПопытки;
	ОбновитьПоказателиНаФорме();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоказателиНаФорме()
	
	ТекущийБаланс = Финансы.СуммаДоходовКРаспределению(КонецМесяца(ТекПериод));
	
	ВсегоРаспределено = Финансы.ВсегоРаспределено(, ТекПериод);
	НачОстатокОбщий = Финансы.НепотраченныйОстатокПрошлогоПериода(, ТекПериод);
    
    ДоходовКРаспределению = ТекущийБаланс - ВсегоРаспределено;
    
    //при отрицательных значениях остатков скрываем данные
    Если ТекущийБаланс - ВсегоРаспределено > 0 Тогда
        Элементы.ДоходовКРаспределению.Видимость = Истина;    
    Иначе 
        Элементы.ДоходовКРаспределению.Видимость = Ложь;    
    КонецЕсли; 
    
    Если НачОстатокОбщий <= 0 Тогда
        Элементы.НачОстатокОбщий.Видимость = Ложь;    
    Иначе
        Элементы.НачОстатокОбщий.Видимость = Истина;    
    КонецЕсли; 
    
	НачОстатокПоСтатье = Финансы.НепотраченныйОстатокПрошлогоПериода(ТекСтатья, ТекПериод);
    Если НачОстатокПоСтатье < 0 Тогда
        НачОстатокПоСтатье = 0;
    КонецЕсли; 
    
    РаспределеноПоСтатье = Финансы.ВсегоРаспределено(ТекСтатья, ТекПериод);
	ВсегоПоСтатье = НачОстатокПоСтатье + РаспределеноПоСтатье;
	
	//оставшиеся (непотраченные) деньги делим на количество дней до конца месяца
	врЗапрос = Новый Запрос("ВЫБРАТЬ РАЗНОСТЬДАТ(&Дата1, &Дата2, ДЕНЬ) КАК Разность");
	врЗапрос.Параметры.Вставить("Дата1", ТекущаяДата());
	врЗапрос.Параметры.Вставить("Дата2", КонецМесяца(ТекущаяДата()));
	ДнейДоКонцаМесяца = врЗапрос.Выполнить().Выгрузить()[0].Разность;
	
	ОбщийБюджетНаДень = Окр(ТекущийБаланс / ДнейДоКонцаМесяца, 2);
	
	ПотраченоПоСтатье = Финансы.РасходПоСтатье(ТекСтатья, ТекПериод);
	БюджетПоСтатьеНаДень = Окр((ВсегоПоСтатье - ПотраченоПоСтатье) / ДнейДоКонцаМесяца, 2);

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ТекПериод = НачалоМесяца(ТекущаяДата());
	ОбновитьДанные();
	РаскрытьВетвиДерева();
	ОбновитьПоказателиНаФорме();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьНовыйОбъектНаСервере(НовыйОбъект, ВыбСтатья)

    НовыйОбъект.ТипОперации = Перечисления.ТипыОпераций.Расход;
    Опер = НовыйОбъект.ДанныеОперации.Добавить();
    Опер.Статья = ВыбСтатья;
    Опер.Счет = Справочники.Счета.НайтиПоНаименованию("Наличные");
    
КонецПроцедуры

&НаКлиенте
Процедура ВвестиРасход(Команда)
    
    ФормаОбъекта = ПолучитьФорму("Документ.Операция.Форма.ФормаДокумента");
    ДанныеФормы  = ФормаОбъекта.Объект;
    СоздатьНовыйОбъектНаСервере(ДанныеФормы, ТекСтатья);
    КопироватьДанныеФормы(ДанныеФормы, ФормаОбъекта.Объект);  
    ФормаОбъекта.Открыть();
    
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьГлавноеОкно" Тогда
    	ТекПериод = НачалоМесяца(ТекущаяДата());
    	ОбновитьДанные();
    	РаскрытьВетвиДерева();
    	ОбновитьПоказателиНаФорме();
    КонецЕсли; 
КонецПроцедуры
