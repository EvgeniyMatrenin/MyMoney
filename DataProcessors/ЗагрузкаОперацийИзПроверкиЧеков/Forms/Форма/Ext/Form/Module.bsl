
&НаКлиенте
Процедура ВыбратьФайл(Команда)
	
	
	
	////подключаемся к эксел
	//Попытка
	//	Excel = Новый COMОбъект("Excel.Application");
	//	Excel.WorkBooks.Open(ИмяФайла);
	//Исключение
	//	Сообщить("Ошибка при открытии файла с помощью Excel! Загрузка не будет произведена!");
	//	Сообщить(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки;
	//	
	//НомерЛиста = 1;
	//
	//Для Каждого Sheet Из Excel.Sheets Цикл
	//	Если Найти(Sheet.Name, "закуп") > 0 Тогда 
	//		Если Объект.ВидЛома = Истина Тогда //ЦМ
	//        	Если (Найти(Sheet.Name, "цветмет") > 0) или (Найти(Sheet.Name, "ЦМ") > 0) Тогда
	//		 		НомерЛиста = Sheet.Index;
	//				//Сообщить("Выбран: " + Sheet.Name);
	//				Прервать;
	//		 	КонецЕсли;
	//		Иначе //ЧМ
	//        	Если Найти(Sheet.Name, "закуп лома") > 0 Тогда
	//		 		НомерЛиста = Sheet.Index;
	//				//Сообщить("Выбран: " + Sheet.Name);
	//				Прервать;
	//		 	КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	//
	////Сообщить("Лист №" + НомерЛиста);
	//
	//Попытка 
	//	//Открываем необходимый лист
	//	Excel.Sheets(НомерЛиста).Select();  // лист 1, по умолчанию  
	//Исключение
	//	//Закрываем Excel
	//	Excel.ActiveWorkbook.Close(); 	
	//	Excel = 0;
	//	Сообщить("Файл "+Строка(ИмяФайла)+" не соответствует необходимому формату! Нужный лист не найден!");
	//	Возврат;
	//КонецПопытки;	
	//
	//
	////Получим количество строк и колонок.	
	//КоличествоСтрокВЭксель = Excel.Cells(1,1).SpecialCells(11).Row;
	//КоличествоКолонокВЭксель = Excel.Cells(1,1).SpecialCells(11).Column;   
	//
	//// Выделяем область на листе Эксель.
	//Область = Excel.Range(Excel.Cells(1,1), Excel.Cells(КоличествоСтрокВЭксель,КоличествоКолонокВЭксель));
	//
	//// Выгружаем область Эксель в двумерный массив.
	//Данные = Область.Value.Выгрузить();		
	//
	////Отключаемся от Excel 
	//Попытка
	//	Excel.DisplayAlerts = 0;
	//	Excel.ActiveWorkbook.Close();
	//	Excel.DisplayAlerts = 1;
	//	Excel.Quit(); 
	//	Excel = Неопределено;        
	//Исключение
	//	Сообщить("Не удалось отключиться от Excel - " + ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки;
	//
	//Если НЕ ВыполнитьЗагрузку(Данные, пДатаС, пДатаПо) Тогда
	//	Сообщить("Ошибка загрузки!")
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЧтениеФайла(ВнутреннийАдресСервера)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ПолучитьИзВременногоХранилища(ВнутреннийАдресСервера).Записать(ИмяВременногоФайла);
	
	ТекстовыйФайл = Новый ЧтениеТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
	ТекстФайла.УстановитьТекст(ТекстовыйФайл.Прочитать());
	
	ТекстовыйФайл.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайл(Команда)
	
	ВнутреннийАдресСервера = "";
	
	Результат = ПоместитьФайл(ВнутреннийАдресСервера);
	
	Если не Результат Тогда
		ВызватьИсключение "Ошибка. Не удалось передать файл на сервер. Операция прервана.";
	КонецЕсли;
	
	ЧтениеФайла(ВнутреннийАдресСервера);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОперацииНаСервере()
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ТекстФайла.ПолучитьТекст());
	Данные = ПрочитатьJSON(Чтение, Ложь);
	Чтение.Закрыть();
	
	//Создаем документ по чеку или выписке
	Если ТипЗнч(Данные) = Тип("Массив") Тогда //выписка
		Для каждого ДокИзВыписки Из Данные Цикл
			Стр = ДокИзВыписки.document.receipt;
			СоздатьДокОперация(Стр);		
		КонецЦикла; 
	ИначеЕсли ТипЗнч(Данные) = Тип("Структура") Тогда //один чек
		Стр = Данные;
		СоздатьДокОперация(Стр);		
	КонецЕсли; 
	
КонецПроцедуры

Процедура СоздатьДокОперация(СтруктураДокумента)

	Док = Документы.Операция;
	НайденДок = Док.НайтиПоРеквизиту("ВнешнийИД", СтрЗаменить(Строка(СтруктураДокумента.fiscalDocumentNumber), " ", ""));
	Если НайденДок = Док.ПустаяСсылка() Тогда
		ДокОбъект = Док.СоздатьДокумент();
		ДокОбъект.Дата = РаспознатьДату(СтруктураДокумента.dateTime);
		ДокОбъект.ТипОперации = Перечисления.ТипыОпераций.Расход;
		ДокОбъект.ВнешнийИД = СтрЗаменить(Строка(СтруктураДокумента.fiscalDocumentNumber), " ", "");
		ДокОбъект.ЗагруженАвтоматически = Истина;
		Для каждого итем Из СтруктураДокумента.items Цикл
			СтрокаТЧ = ДокОбъект.ДанныеОперации.Добавить();
			СтрокаТЧ.Статья = Объект.Статья;
			СтрокаТЧ.Счет = Объект.Счет;
			СтрокаТЧ.Сумма = итем.sum / 100;
			СтрокаТЧ.Примечание = итем.name;
		КонецЦикла; 
		ДокОбъект.Записать();
		Сообщить("Документ " + ДокОбъект + " загружен.");
	Иначе
		Сообщить("Документ " + СтруктураДокумента.fiscalDocumentNumber + " был загружен ранее (" + НайденДок.Ссылка + ")");
	КонецЕсли; 

КонецПроцедуры

Функция РаспознатьДату(Дт)

	Если ТипЗнч(Дт) = Тип("Число") Тогда  //юникс время типа 1509819600
		Возврат МестноеВремя('19700101' + Дт);
	Иначе // строка в выписке формата "2017-11-04T18:20:00"	
	    Возврат СтрокаВДату("yyyy-MM-ddTHH:mm:ss", Дт);
	КонецЕсли; 

КонецФункции // РаспознатьДату()

//взято из (11) в https://infostart.ru/public/200111/
Функция СтрокаВДату(Знач ФорматДаты, Знач Дано, Ошибка = Ложь) Экспорт
	Попытка
		ё = Формат('00010101', "ДФ=" + ФорматДаты) // - необязательная проверка первого правильности параметра
	Исключение
		Ошибка = Истина;
		Возврат '00010101'
	КонецПопытки;
	Ч = Новый Соответствие;
	Для ё = 1 По СтрДлина(ФорматДаты) + 7 Цикл
		Ч[Сред(ФорматДаты + "dMyHhms", ё, 1)] = 0 // - инициализация частей даты
	КонецЦикла;
	Для ё = 1 По 12 Цикл
		Дано = СтрЗаменить(Дано, Формат(Дата(1, ё, 1), "ДФ=MMММ"), Формат(ё, "ЧЦ=4; ЧВН=")); // - замена названий месяцев числами
		Дано = СтрЗаменить(Дано, Формат(Дата(1, ё, 1), "ДФ=MMМ" ), Формат(ё, "ЧЦ=3; ЧВН="))
	КонецЦикла;
	Для ё = 1 По СтрДлина(ФорматДаты) Цикл
		Ч[Сред(ФорматДаты, ё, 1)] = 10 * Ч[Сред(ФорматДаты, ё, 1)] + Найти("123456789", Сред(Дано, ё, 1)); // - накопление частей даты
		Ошибка = Ошибка ИЛИ Найти("dMyHhms", Сред(ФорматДаты, ё, 1)) И НЕ Найти("0123456789", Сред(Дано, ё, 1)) // - необязательная проверка на цифры
	КонецЦикла;
	Ч["y"] = Ч["y"] + ?(Ч["y"] < 50, 2000, ?(Ч["y"] < 100, 1900, 0)); // - дополнение двух цифр года до четырех
	Попытка
		Возврат Дата(Ч["y"], Ч["M"], Ч["d"], Ч["H"] + Ч["h"], Ч["m"], Ч["s"])
	Исключение
		Ошибка = Истина;
		Возврат '00010101'
	КонецПопытки
КонецФункции 

&НаКлиенте
Процедура СформироватьОперации(Команда)
	СформироватьОперацииНаСервере();
КонецПроцедуры

